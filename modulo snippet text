
//----------------------------------------
const int mod = 1e9+7;

int add(int a,int b){ //O(1)
    int ans = (a+b);
    if(ans >= mod) ans -= mod;
    if(ans < 0) ans += mod;
    return ans;
}

int sub(int a,int b){//O(1)
    return add(a,-b);
}

int mul(int a,int b){//O(1)
    int ans = (1LL*a*b)%mod;
    return ans;
}
int binpow(int a,int b){ // O(log(b))
    if(b==0)return 1;
    if(b==1)return a;
    if((b%2)!=0){
        return mul(a,binpow(a,b-1));
    }else{
        int temp = binpow(a,b/2);
        return mul(temp,temp);
    }
}

int inv(int a){ // O(log(mod))
    return binpow(a,mod-2);
}

int divi(int a,int b){ // O(log(b))
    return mul(a,inv(b));
}

const int N = 1000001;
int fact[N];
int factinv[N];
int pow2[N];

void init(){
    fact[0] = 1;
    for(int i=1;i<N;i++){
        fact[i] = mul(fact[i-1],i);
    }

    pow2[0] = 1;
    for(int i=1;i<N;i++){
        pow2[i] = mul(pow2[i-1],2);
    }
    
    // O(n+log(mod))
    factinv[N-1] = inv(fact[N-1]);
    for(int i=N-2;i>=0;i--){
        factinv[i] = mul(factinv[i+1],i+1);
    }
}

int ncr(int n,int r){
    if(r<0||r>n)return 0;
    return mul(fact[n],mul(factinv[r],factinv[n-r]));
}
//------------------------------------------------

